workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE != "web" && $CI_COMMIT_BRANCH != "main"
      when: never
    - if: $ENABLED_ALL
      when: always
    - if: $ENABLED_STAGES =~ /(?:^|,)\s*{% if cookiecutter.deployment_type == "digitalocean-k8s" %}(?:base|cluster){% else %}cluster{% endif %}\s*(?:,|$)/i && $ENABLED_STACKS
      when: always
    - if: $ENABLED_STAGES =~ /(?:^|,)\s*environment\s*(?:,|$)/i && $ENABLED_ENVS
      when: always

stages:{% if cookiecutter.deployment_type == "digitalocean-k8s" %}
  - Base{% endif %}
  - Cluster
  - Environment

image:
  name: docker:20

services:
  - docker:20-dind

.terraform:
  script:
  - >
      docker run --rm
      -u `id -u`
      -v ${PWD}:${PWD}
      -w ${PWD}
      -e TERRAFORM_BACKEND={{ cookiecutter.terraform_backend }}
      -e TERRAFORM_EXTRA_VAR_FILE
      -e TERRAFORM_VARS_DIR
      -e TF_ROOT{% if cookiecutter.terraform_backend == "gitlab" %}
      -e CI_API_V4_URL
      -e CI_COMMIT_SHA
      -e CI_JOB_ID
      -e CI_JOB_STAGE
      -e CI_JOB_TOKEN
      -e CI_PROJECT_DIR
      -e CI_PROJECT_ID
      -e CI_PROJECT_NAME
      -e CI_PROJECT_NAMESPACE
      -e CI_PROJECT_PATH
      -e TF_STATE_NAME{% else %}
      -e TF_WORKSPACE{% endif %}{% if cookiecutter.terraform_backend == "terraform-cloud" %}
      -e TFC_TOKEN{% endif %}{% if cookiecutter.deployment_type == "digitalocean-k8s" %}
      -e TF_VAR_digitalocean_token="${DIGITALOCEAN_TOKEN}"{% elif cookiecutter.deployment_type == "other-k8s" %}
      -e TF_VAR_kubernetes_cluster_ca_certificate="${KUBERNETES_CLUSTER_CA_CERTIFICATE}"
      -e TF_VAR_kubernetes_host="${KUBERNETES_HOST}"
      -e TF_VAR_kubernetes_token="${KUBERNETES_TOKEN}"{% endif %}
      -e TF_VAR_project_slug={{ cookiecutter.project_slug }}{% if "s3" in cookiecutter.media_storage %}
      -e TF_VAR_s3_access_id="${S3_ACCESS_ID}"
      -e TF_VAR_s3_region="${S3_REGION}"
      -e TF_VAR_s3_secret_key="${S3_SECRET_KEY}"{% if cookiecutter.media_storage == "digitalocean-s3" %}
      -e TF_VAR_s3_host="${S3_HOST}"{% elif cookiecutter.media_storage == "aws-s3" %}
      -e TF_VAR_s3_bucket_name="${S3_BUCKET_NAME}"{% endif %}{% endif %}
      -e TF_VAR_basic_auth_password="${BASIC_AUTH_PASSWORD}"
      -e TF_VAR_basic_auth_username="${BASIC_AUTH_USERNAME}"
      -e TF_VAR_grafana_password="${GRAFANA_PASSWORD}"
      -e TF_VAR_registry_password="${REGISTRY_PASSWORD}"
      -e TF_VAR_registry_server="${REGISTRY_SERVER:-registry.gitlab.com}"
      -e TF_VAR_registry_username="${REGISTRY_USERNAME}"
      -e TF_VAR_tls_certificate_crt="${TLS_CERTIFICATE_CRT}"
      -e TF_VAR_tls_certificate_key="${TLS_CERTIFICATE_KEY}"
      -e TF_VAR_env_slug="${ENV_SLUG}"
      -e TF_VAR_stack_slug="${STACK_SLUG}"
      registry.gitlab.com/gitlab-org/terraform-images/stable:latest sh -c "${TERRAFORM_CMD}"

.init:
  extends:
    - .terraform
  variables:
    TERRAFORM_CMD: ${CI_PROJECT_DIR}/scripts/terraform.sh init

.validate:
  extends:
    - .terraform
  variables:
    TERRAFORM_CMD: ${CI_PROJECT_DIR}/scripts/terraform.sh validate

.plan:
  extends:
    - .terraform
  variables:
    TERRAFORM_CMD: ${CI_PROJECT_DIR}/scripts/terraform.sh plan-json
  artifacts:
    name: plan
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

.apply:
  extends:
    - .terraform
  variables:
    TERRAFORM_CMD: ${CI_PROJECT_DIR}/scripts/terraform.sh apply -auto-approve

{% if cookiecutter.deployment_type == "digitalocean-k8s" %}### BASE STACK ###{% for stack_slug in cookiecutter.stacks %}

# BASE STAGE - {{ stack_slug|title }} Stack #

.stack_{{ stack_slug }}_base:
  stage: Base
  variables:
    STACK_SLUG: {{ stack_slug }}
    TERRAFORM_EXTRA_VAR_FILE: {{ stack_slug }}.tfvars
    TERRAFORM_VARS_DIR: ${CI_PROJECT_DIR}/terraform/base/vars
    TF_ROOT: ${CI_PROJECT_DIR}/terraform/base/{{ cookiecutter.deployment_type }}{% if cookiecutter.terraform_backend == "gitlab" %}
    TF_STATE_NAME: stack_{{ stack_slug }}_base{% else %}
    TF_WORKSPACE: {{ cookiecutter.project_slug }}_orchestrator_base_{{ stack_slug }}{% endif %}
  cache:
    key: {{ cookiecutter.project_slug }}-stack-{{ stack_slug }}-base
    paths:
      - ${TF_ROOT}/.terraform
  environment:
    name: Stack_{{ stack_slug|title }}/Stage_Base
  rules:
    - if: $ENABLED_ALL == "true"
      when: always
    - if: $ENABLED_STAGES =~ /(?:^|,)\s*base\s*(?:,|$)/i && $ENABLED_STACKS =~ /(?:^|,)\s*{{ stack_slug }}\s*(?:,|$)/i
      when: always
    - when: never

stack_{{ stack_slug }}_base_init:
  extends:
    - .init
    - .stack_{{ stack_slug }}_base

stack_{{ stack_slug }}_base_validate:
  extends:
    - .validate
    - .stack_{{ stack_slug }}_base
  needs: ["stack_{{ stack_slug }}_base_init"]

stack_{{ stack_slug }}_base_plan:
  extends:
    - .plan
    - .stack_{{ stack_slug }}_base
  needs: ["stack_{{ stack_slug }}_base_validate"]

stack_{{ stack_slug }}_base_apply:
  extends:
    - .apply
    - .stack_{{ stack_slug }}_base
  needs: ["stack_{{ stack_slug }}_base_plan"]{% endfor %}

{% endif %}### CLUSTER STACK ###{% for stack_slug, stack_envs in cookiecutter.stacks.items() %}

# CLUSTER STAGE - {{ stack_slug|title }} Stack #

.stack_{{ stack_slug }}_cluster:
  stage: Cluster
  variables:
    STACK_SLUG: {{ stack_slug }}
    TERRAFORM_EXTRA_VAR_FILE: {{ stack_slug }}.tfvars
    TERRAFORM_VARS_DIR: ${CI_PROJECT_DIR}/terraform/cluster/vars
    TF_ROOT: ${CI_PROJECT_DIR}/terraform/cluster/{{ cookiecutter.deployment_type }}{% if cookiecutter.terraform_backend == "gitlab" %}
    TF_STATE_NAME: stack_{{ stack_slug }}_cluster{% else %}
    TF_WORKSPACE: {{ cookiecutter.project_slug }}_orchestrator_cluster_{{ stack_slug }}{% endif %}
  cache:
    key: {{ cookiecutter.project_slug }}-stack-{{ stack_slug }}-cluster
    paths:
      - ${TF_ROOT}/.terraform
  environment:
    name: Stack_{{ stack_slug|title }}/Stage_Cluster
  rules:
    - if: $ENABLED_ALL == "true"
      when: always
    - if: $ENABLED_STAGES =~ /(?:^|,)\s*cluster\s*(?:,|$)/i && $ENABLED_STACKS =~ /(?:^|,)\s*{{ stack_slug }}\s*(?:,|$)/i
      when: always
    - when: never

stack_{{ stack_slug }}_cluster_init:
  extends:
    - .init
    - .stack_{{ stack_slug }}_cluster

stack_{{ stack_slug }}_cluster_validate:
  extends:
    - .validate
    - .stack_{{ stack_slug }}_cluster
  needs: ["stack_{{ stack_slug }}_cluster_init"]

stack_{{ stack_slug }}_cluster_plan:
  extends:
    - .plan
    - .stack_{{ stack_slug }}_cluster
  needs:{% if cookiecutter.deployment_type == "digitalocean-k8s" %}
    - job: stack_{{ stack_slug }}_base_apply
      optional: true{% endif %}
    - job: stack_{{ stack_slug }}_cluster_validate

stack_{{ stack_slug }}_cluster_apply:
  extends:
    - .apply
    - .stack_{{ stack_slug }}_cluster
  needs: ["stack_{{ stack_slug }}_cluster_plan"]{% endfor %}{% for stack_slug, stack_envs in cookiecutter.stacks.items() %}

### ENVIRONMENT STAGE - {{ stack_slug|title }} Stack ###

.{{ stack_slug }}_env:
  stage: Environment
  variables:
    TERRAFORM_VARS_DIR: ${CI_PROJECT_DIR}/terraform/environment/vars
    TF_ROOT: ${CI_PROJECT_DIR}/terraform/environment/{{ cookiecutter.deployment_type }}{% for env_slug, env_conf in stack_envs.items() %}

# {{ env_conf.name }} Environment #

.env_{{ env_slug }}:
  extends:
    - .{{ stack_slug }}_env
  variables:
    ENV_SLUG: {{ env_slug }}
    TERRAFORM_EXTRA_VAR_FILE: {{ env_slug }}.tfvars{% if cookiecutter.terraform_backend == "gitlab" %}
    TF_STATE_NAME: env_{{ env_slug }}{% else %}
    TF_WORKSPACE: {{ cookiecutter.project_slug }}_orchestrator_environment_{{ env_slug }}{% endif %}
  cache:
    key: {{ cookiecutter.project_slug }}-env-{{ env_slug }}
    paths:
      - ${TF_ROOT}/.terraform
  environment:
    name: Stack_{{ stack_slug|title }}/Stage_Environment/Env_{{ env_conf.name }}
    url: {{ env_conf.url }}
  rules:
    - if: $ENABLED_ALL == "true"
      when: always
    - if: $ENABLED_STAGES =~ /(?:^|,)\s*environment\s*(?:,|$)/i && $ENABLED_ENVS =~ /(?:^|,)\s*{{ env_slug }}\s*(?:,|$)/i
      when: always
    - when: never

env_{{ env_slug }}_init:
  extends:
    - .init
    - .env_{{ env_slug }}

env_{{ env_slug }}_validate:
  extends:
    - .validate
    - .env_{{ env_slug }}
  needs: ["env_{{ env_slug }}_init"]

env_{{ env_slug }}_plan:
  extends:
    - .plan
    - .env_{{ env_slug }}
  needs:
    - job: stack_{{ stack_slug }}_cluster_apply
      optional: true
    - job: env_{{ env_slug }}_validate

env_{{ env_slug }}_apply:
  extends:
    - .apply
    - .env_{{ env_slug }}
  needs: ["env_{{ env_slug }}_plan"]{% endfor %}{% endfor %}
