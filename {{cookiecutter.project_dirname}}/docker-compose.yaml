version: "3.9"

services:
{% if cookiecutter.backend_type != "none" %}
  {{ cookiecutter.backend_service_slug }}:
    build:
      args:
        USER: ${USER:-appuser}
      context: ./{{ cookiecutter.backend_service_slug }}
      target: ${BACKEND_BUILD_TARGET:-local}
    depends_on:
      postgres:
        condition: service_healthy{% if cookiecutter.local_s3_storage == "true" %}
      minio:
        condition: service_healthy{% endif %}
    environment:
      - CACHE_URL
      - DATABASE_URL
      - DJANGO_ADMINS
      - DJANGO_ALLOWED_HOSTS{% if "s3" in cookiecutter.media_storage %}
      - DJANGO_AWS_S3_URL{% endif %}
      - DJANGO_CONFIGURATION
      - DJANGO_DEBUG
      - DJANGO_DEFAULT_FROM_EMAIL
      - DJANGO_SECRET_KEY
      - DJANGO_SERVER_EMAIL
      - DJANGO_SESSION_COOKIE_DOMAIN
      - DJANGO_SUPERUSER_EMAIL
      - DJANGO_SUPERUSER_PASSWORD
      - DJANGO_SUPERUSER_USERNAME
      - EMAIL_URL{% if cookiecutter.use_pact == "true" %}
      - PACT_BROKER_URL
      - PACT_PROVIDER_NAME{% endif %}
      - PYTHONBREAKPOINT
      - PYTHONDEVMODE
      - PYTHONTRACEMALLOC
    healthcheck:
      test: curl --fail --head http://{{ cookiecutter.backend_service_slug }}:{{ cookiecutter.backend_service_port }}/{{ cookiecutter.backend_service_slug }}/health/ || exit 1
      interval: 30s
      start_period: 5s
      timeout: 5s
      retries: 5
    user: ${USER:-appuser}
    volumes:
      - ./{{ cookiecutter.backend_service_slug }}:/app{% endif %}{% if cookiecutter.local_s3_storage == "true" %}
    networks:
      custom:
        ipv4_address: 172.20.0.10{% endif %}
{% if cookiecutter.frontend_type != "none" %}
  {{ cookiecutter.frontend_service_slug }}:
    build:
      args:
        GROUP_ID: ${GROUP_ID:-1000}
        USER_ID: ${USER_ID:-1000}
        USER: ${USER:-appuser}
      context: ./{{ cookiecutter.frontend_service_slug }}
      dockerfile: ${FRONTEND_DOCKER_FILE:-docker/local.Dockerfile}
    environment:
      - INTERNAL_BACKEND_URL=${INTERNAL_BACKEND_URL:-http://{{ cookiecutter.backend_service_slug }}:{{ cookiecutter.backend_service_port }}{{ '}' }}
      - NEXT_PUBLIC_PROJECT_URL=${PROJECT_URL:-https://localhost:8443}
      - REACT_ENVIRONMENT=${REACT_ENVIRONMENT:-Development}
    healthcheck:
      test: wget -O- -q http://{{ cookiecutter.frontend_service_slug }}:{{ cookiecutter.frontend_service_port }}/{{ cookiecutter.frontend_service_slug }}/health || exit 1
      interval: 30s
      timeout: 5s
      start_period: 5s
      retries: 5
    user: ${USER:-appuser}
    volumes:
      - ./{{ cookiecutter.frontend_service_slug }}:/app
      - /app/node_modules{% endif %}

  traefik:
    command:
      - "--configFile=/traefik/conf/static.yaml"
    depends_on:{% if cookiecutter.backend_type != 'none' %}
      {{ cookiecutter.backend_service_slug }}:
        condition: service_healthy{% endif %}{% if cookiecutter.frontend_type != 'none' %}
      {{ cookiecutter.frontend_service_slug }}:
        condition: service_healthy{% endif %}
    healthcheck:
      test: ["CMD", "traefik" ,"healthcheck", "--ping"]
      interval: 30s
      timeout: 5s
      start_period: 5s
      retries: 5
    image: traefik:v2.10
    ports:
      - "${LOCAL_HTTPS_PORT:-8443}:8443"
      - "${TRAEFIK_DASHBOARD_PORT:-8080}:8080"
    volumes:
      - ./traefik/:/traefik/:ro

  postgres:
    environment:
      - POSTGRES_DB={{ cookiecutter.project_slug }}
      - POSTGRES_INITDB_ARGS=--no-sync
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
      interval: 3s
      timeout: 3s
      retries: 30
    image: postgres:14-bullseye
    volumes:
      - pg_data:/var/lib/postgresql/data{% if cookiecutter.local_s3_storage == "true" %}
    networks:
      custom:
        ipv4_address: 172.20.0.11

  minio:
    command: minio server /var/lib/minio/data --console-address ":9001"
    environment:
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_BUCKET_NAME={{ cookiecutter.project_slug }}
      - MINIO_ROOT_USER=minio-admin
      - MINIO_ROOT_PASSWORD=minio-admin
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 3s
      timeout: 3s
      retries: 30
    image: minio/minio:RELEASE.2024-01-31T20-20-33Z
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - minio_data:/var/lib/minio/data
    networks:
      custom:
        ipv4_address: 172.20.0.12{% endif %}

volumes:
  pg_data: {}{% if cookiecutter.local_s3_storage == "true" %}
  minio_data: {}

networks:
  custom:
    ipam:
      config:
      - subnet: 172.20.0.0/16{% endif %}
